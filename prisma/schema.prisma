// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String  @unique
  email     String  @unique
  phone     Int?
  role      String  @default("user")
  password  String

  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  orders    Order[]
  @@map("users")
}

model Product {
  id        String  @id @default(uuid())
  name      String
  description String
  category  String[]
  price     Decimal
  stock     Int
  minStock  Int
  status    String
  imageUrl  String?

  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  Order_Product    Order_Product[]
  @@map("products")
}

model Order {
  id        String  @id @default(uuid())
  user_id   String  // foreign key
  total     Decimal
  status    String
  delivery_method String

  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Order_Product    Order_Product[]
  payment   Payment?
  @@map("orders")
}

model Payment {
  id        String  @id @default(uuid())
  order_id  String  @unique  // foreign key
  payment_method  String
  payment_status  String
  voucherUrl   String?

  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  @@map("payments")
}

model Order_Product {
  id        String  @id @default(uuid())
  order_id  String  // foreign key
  product_id String // foreign key
  quantity  Int
  price     Decimal

  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  order     Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  @@map("order_products")
}